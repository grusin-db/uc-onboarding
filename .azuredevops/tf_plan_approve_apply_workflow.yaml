trigger: none
name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

variables:
  - name: System.Debug
    value: true

parameters:
  - name: environment
    values:
      - dev
      - acc
      - prd
    default: dev

stages:
  - stage: terraform_plan
    jobs:
      - job: onboarding
        displayName: terraform-uc for ${{ parameters.environment}}
        workspace:
          clean: all
        variables:
          - name: azureSubscription
            ${{ if eq(parameters.environment, 'dev') }}:
              value : uc-dev-service-connection
            ${{ if eq(parameters.environment, 'acc') }}:
              value : uc-acc-service-connection
            ${{ if eq(parameters.environment, 'prd') }}:
              value : uc-prd-service-connection

        steps:
          - task: AzureCLI@2
            displayName: Fetch credentials for azure
            inputs:
              azureSubscription: ${{ variables.azureSubscription }}
              scriptType: bash
              addSpnToEnvironment: true
              useGlobalConfig: true
              scriptLocation: inlineScript
              inlineScript: |
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$tenantId"
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;]$servicePrincipalId"
                echo "spn: ${servicePrincipalId::-2}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;]$servicePrincipalKey"

          - task: TerraformInstaller@0
            displayName: "Install terraform executable"
            inputs:
              terraformVersion: "1.5.5"
          
          - task: Bash@3
            displayName: Install python requirements.txt
            inputs:
              targetType: 'inline'
              script: 'pip install -r requirements.txt'
          
          - task: Bash@3
            displayName: Initialize terraform providers and state/env .tmp files
            inputs:
              filePath: 'scripts/pre_tf.sh'
              arguments: '${{ parameters.environment }}'

          - task: TerraformCLI@0
            displayName: terraform plan
            inputs:
              command: 'plan'
              commandOptions: '-out=tfplan'
              allowTelemetryCollection: true
              publishPlanResults: 'mytfplan'

          - task: Bash@3
            displayName: Validate tfplan using custom python validator
            inputs:
              targetType: 'inline'
              script: terraform show -json tfplan > tfplan.json && python scripts/validate_plan.py ${{ parameters.environment }} tfplan.json

          - task: Bash@3
            displayName: 'Get Json values and set output variables'
            name: setOutput
            inputs:
              targetType: inline
              script: |
                planDesc=$(cat tfplan.json )
                echo "##vso[task.setvariable variable=planDesc;isOutput=true]$planDesc"
          
          - task: ArchiveFiles@2
            displayName: 'Create Plan Artifact'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
 
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Plan Artifact'  
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(Build.BuildId)-tfplan'
              publishLocation: 'Container'
  
  - stage: terraform_apply
    dependsOn: [terraform_plan]
    condition: succeeded('terraform_plan')
    variables:
      - name: deployEnvironment
        ${{ if eq(parameters.environment, 'dev') }}:
          value : uc-dev-service-connection
        ${{ if eq(parameters.environment, 'acc') }}:
          value : uc-acc-service-connection
        ${{ if eq(parameters.environment, 'prd') }}:
          value : uc-prd-service-connection
    jobs:
    - deployment: terraform_apply
      continueOnError: false
      timeoutInMinutes: 120
      environment: ${{ variables.deployEnvironment }}
      strategy:
       runOnce:
        deploy:
            steps:
              - checkout: none
 
              - task: DownloadBuildArtifacts@0
                displayName: 'Download Plan Artifact'
                inputs:
                  artifactName: '$(Build.BuildId)-tfplan'
 
              - task: ExtractFiles@1
                displayName: 'Extract Terraform Plan Artifact'
                inputs:
                  archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
                  destinationFolder: '$(System.DefaultWorkingDirectory)/'
                  cleanDestinationFolder: false
                  overwriteExistingFiles: true
                  
              - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
                displayName: "Install terraform executable"
                inputs:
                  terraformVersion: "1.5.0"

              - task: Bash@3
                displayName: Install python requirements.txt
                inputs:
                  targetType: 'inline'
                  script: 'pip install -r requirements.txt'
              
              - task: Bash@3
                displayName: Apply Plan
                inputs:
                  targetType: 'inline'
                  script: terraform apply tfplan         

                  